import type { ObjectNode } from "@src/parse/parseNodeTypes";
import type { ParsedProcedure } from "@src/parse/parseProcedure";
import { z } from "zod";
export declare const testTrpcInstance: {
    _config: import("@trpc/server/dist/unstable-core-do-not-import").RootConfig<{
        ctx: object;
        meta: {
            description?: string | undefined;
        };
        errorShape: import("@trpc/server/dist/unstable-core-do-not-import").DefaultErrorShape;
        transformer: false;
    }>;
    procedure: import("@trpc/server/dist/unstable-core-do-not-import").ProcedureBuilder<object, {
        description?: string | undefined;
    }, object, typeof import("@trpc/server/dist/unstable-core-do-not-import").unsetMarker, typeof import("@trpc/server/dist/unstable-core-do-not-import").unsetMarker, typeof import("@trpc/server/dist/unstable-core-do-not-import").unsetMarker, typeof import("@trpc/server/dist/unstable-core-do-not-import").unsetMarker, false>;
    middleware: <$ContextOverrides>(fn: import("@trpc/server/dist/unstable-core-do-not-import").MiddlewareFunction<object, {
        description?: string | undefined;
    }, object, $ContextOverrides, unknown>) => import("@trpc/server/dist/unstable-core-do-not-import").MiddlewareBuilder<object, {
        description?: string | undefined;
    }, $ContextOverrides, unknown>;
    router: {
        <TInput extends import("@trpc/server").RouterRecord>(input: TInput): import("@trpc/server/dist/unstable-core-do-not-import").BuiltRouter<{
            ctx: object;
            meta: {
                description?: string | undefined;
            };
            errorShape: import("@trpc/server/dist/unstable-core-do-not-import").DefaultErrorShape;
            transformer: false;
        }, TInput>;
        <TInput extends import("@trpc/server/dist/unstable-core-do-not-import").CreateRouterOptions>(input: TInput): import("@trpc/server/dist/unstable-core-do-not-import").BuiltRouter<{
            ctx: object;
            meta: {
                description?: string | undefined;
            };
            errorShape: import("@trpc/server/dist/unstable-core-do-not-import").DefaultErrorShape;
            transformer: false;
        }, import("@trpc/server/dist/unstable-core-do-not-import").DecorateCreateRouterOptions<TInput>>;
    };
    mergeRouters: typeof import("@trpc/server/dist/unstable-core-do-not-import").mergeRouters;
    createCallerFactory: <TRecord extends import("@trpc/server").RouterRecord>(router: Pick<import("@trpc/server/dist/unstable-core-do-not-import").Router<{
        ctx: object;
        meta: {
            description?: string | undefined;
        };
        errorShape: import("@trpc/server/dist/unstable-core-do-not-import").DefaultErrorShape;
        transformer: false;
    }, TRecord>, "_def">) => import("@trpc/server/dist/unstable-core-do-not-import").RouterCaller<{
        ctx: object;
        meta: {
            description?: string | undefined;
        };
        errorShape: import("@trpc/server/dist/unstable-core-do-not-import").DefaultErrorShape;
        transformer: false;
    }, TRecord>;
};
export declare const parseTestRouterInputSchema: z.ZodObject<{
    id: z.ZodString;
    age: z.ZodNumber;
    expectedAgeOfDeath: z.ZodOptional<z.ZodNumber>;
    object: z.ZodObject<{
        nestedId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        nestedId: string;
    }, {
        nestedId: string;
    }>;
    du: z.ZodDiscriminatedUnion<"d", [z.ZodObject<{
        d: z.ZodLiteral<"one">;
        oneProps: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        d: "one";
        oneProps: string;
    }, {
        d: "one";
        oneProps: string;
    }>, z.ZodObject<{
        d: z.ZodLiteral<"two">;
    }, "strip", z.ZodTypeAny, {
        d: "two";
    }, {
        d: "two";
    }>]>;
}, "strip", z.ZodTypeAny, {
    object: {
        nestedId: string;
    };
    id: string;
    age: number;
    du: {
        d: "one";
        oneProps: string;
    } | {
        d: "two";
    };
    expectedAgeOfDeath?: number | undefined;
}, {
    object: {
        nestedId: string;
    };
    id: string;
    age: number;
    du: {
        d: "one";
        oneProps: string;
    } | {
        d: "two";
    };
    expectedAgeOfDeath?: number | undefined;
}>;
export declare const expectedTestRouterInputParsedNode: ObjectNode;
export declare const testQueryExpectedParseResult: ParsedProcedure;
export declare const testMutationExpectedParseResult: ParsedProcedure;
export declare const testQuery: import("@trpc/server").TRPCQueryProcedure<{
    input: {
        object: {
            nestedId: string;
        };
        id: string;
        age: number;
        du: {
            d: "one";
            oneProps: string;
        } | {
            d: "two";
        };
        expectedAgeOfDeath?: number | undefined;
    };
    output: string;
}>;
export declare const testMutation: import("@trpc/server").TRPCMutationProcedure<{
    input: {
        object: {
            nestedId: string;
        };
        id: string;
        age: number;
        du: {
            d: "one";
            oneProps: string;
        } | {
            d: "two";
        };
        expectedAgeOfDeath?: number | undefined;
    };
    output: string;
}>;
export declare const parseTestRouter: import("@trpc/server/dist/unstable-core-do-not-import").BuiltRouter<{
    ctx: object;
    meta: {
        description?: string | undefined;
    };
    errorShape: import("@trpc/server/dist/unstable-core-do-not-import").DefaultErrorShape;
    transformer: false;
}, {
    testQuery: import("@trpc/server").TRPCQueryProcedure<{
        input: {
            object: {
                nestedId: string;
            };
            id: string;
            age: number;
            du: {
                d: "one";
                oneProps: string;
            } | {
                d: "two";
            };
            expectedAgeOfDeath?: number | undefined;
        };
        output: string;
    }>;
    testMutation: import("@trpc/server").TRPCMutationProcedure<{
        input: {
            object: {
                nestedId: string;
            };
            id: string;
            age: number;
            du: {
                d: "one";
                oneProps: string;
            } | {
                d: "two";
            };
            expectedAgeOfDeath?: number | undefined;
        };
        output: string;
    }>;
}>;
